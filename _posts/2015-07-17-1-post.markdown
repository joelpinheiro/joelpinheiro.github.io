---
layout: post
title: "WebStorage and Workers"
date: 2015-07-17 14:00
---

Lately I've been working on JS stuff like web storage and workers because of the research project. We are testing new possibilities to improve the performance of our architecture. 

Web storage or DOM storage are methods and protocols used for storing data in a web browser. The goal is to support persistent data storage, as cookies, but with much better capacity and without stored information in HTTP request header. There are [two mechnisms](http://www.w3.org/TR/webstorage/#introduction) for storing name-value pairs on the client side. The first one is when the user is carrying out a single transaction, but could be carrying out multiple transactions in different windows at the same time. For example if a user is buying tickets in two different windows, and the site used cookies to keep track of which ticket the user was buying, the ticket currently being purchase would "leak" from one window to the other. To solve this issue, HTML5 comes with sessionStorage. Sites can add data to the session storage, and it will allow to separete instances of the same web application to run in different windows without interfering with each other. The other is localStorage that is used to access a page's local storage area but it don't will delete the local data after the browser closed. Web storage is an improvement on cookies. Regarding storage size it will provide far greater storage capacity (5 MB per origin in chrome) compared to 5kB available to cookies. Unlike cookies, which can be accessed by server side, web storage is only accessable by client-side scripting. Web storage data is not automatically transmitter to the server in every HTTP request, and so, it can not directly write to web storage. Web storage currently provides a better programmating interface that cookies because it uses key-value model both strings.

For a more complex client persistent data there is indexed database API, or IndexedDB, that is a local database of records holding simples values and hierarchical objects. It allows to store significant amounts of structured data and high performance searches of this data using indexes. All operations are done [asynchronous](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API) so as not to block the rest of an application's running. IndexedDB API may seem to complicated for simple cases. So libraries like [localForage](http://mozilla.github.io/localForage/) and [dexie.js](http://www.dexie.org/) make IndexedDB more user-friendly.

When executing scripts in an HTML page, the page becomes unresponsive until the script is finished. A [WebWorker](http://www.w3schools.com/html/html5_webworkers.asp) is a JS that runs in the background without affecting the performance of the page. Once web workers are in external files, they do not have access to window, document and parent object. If the goal is to access from several browsing contexts, such as several windows, iframes or even workers, then [ShareWorker](https://developer.mozilla.org/pt-PT/docs/Web/API/SharedWorker) interface can allow that. There is another type of worker that is [ServiceWorker](http://www.html5rocks.com/en/tutorials/service-worker/introduction/). Service worker is a script that is run by the browser in the background, separated from a web page, opening the door to features which dont't need a web page or user interaction. The reason of this is that it allows you to support offline experiences and cache data. OnFetch the worker will search for data stored in cache if there isn't any then it will download it. But if the data exits in cache it will retrieve it improving the performance.